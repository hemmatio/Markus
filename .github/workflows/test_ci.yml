name: MarkUs Tests
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - master

jobs:
  setup:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: markus_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --entrypoint redis-server
    env:
      BUNDLE_WITHOUT: development:production:console:unicorn
      RAILS_ENV: test
      NODE_ENV: test
      RSPEC_RENDER_VIEWS: true
    permissions:
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get -yqq install libpq-dev cmake ghostscript pandoc imagemagick libmagickwand-dev git libgl1 tesseract-ocr pandoc poppler-utils
      - name: Set up ruby and cache gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby-3.3
          bundler-cache: false

      - name: Bundle install to vendor
        run: |
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Set up node and cache packages
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install npm packages
        run: npm ci
      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-jupyter.txt') }}-${{ hashFiles('requirements-scanner.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache playwright's installation of Chromium
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('requirements-jupyter.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install python packages and playwright dependencies
        run: |
          python3.10 -m venv venv
          ./venv/bin/pip install -r requirements-jupyter.txt -r requirements-scanner.txt
          ./venv/bin/playwright install chromium
          ./venv/bin/playwright install-deps chromium

      - name: Configure server
        run: |
          sudo rm -f /etc/localtime
          sudo ln -s /usr/share/zoneinfo/US/Eastern /etc/localtime
          sudo sed -ri 's/(rights=")none("\s+pattern="PDF")/\1read\2/' /etc/ImageMagick-6/policy.xml
          cp config/database.yml.ci config/database.yml

      - name: Build assets
        run: |
          bundle exec rake javascript:build
          bundle exec rake css:build

      - name: Create binstubs for common executables
        run: |
          bundle binstubs bundler rake rails rspec --path=bin
          # ensure local node bin is on PATH during build
          echo "$PWD/node_modules/.bin" >> $GITHUB_PATH

      - name: Pack prepared workspace
        run: |
          tar -czf workspace.tgz \
            --exclude-vcs \
            --exclude='./tmp/*' \
            --exclude='./log/*' \
            --exclude='./coverage/*' \
            .

      - name: Upload setup workspace
        uses: actions/upload-artifact@v4
        with:
          name: setup-workspace
          path: workspace.tgz

  test_rspec:
    needs: setup
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: markus_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --entrypoint redis-server
    env:
      BUNDLE_WITHOUT: development:production:console:unicorn
      RAILS_ENV: test
      NODE_ENV: test
      RSPEC_RENDER_VIEWS: true
      BUNDLE_PATH: vendor/bundle
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: setup-workspace
          path: .

      - name: Extract prepared workspace
        run: tar -xzf workspace.tgz

      - name: Wire up PATH and Bundler
        run: |
          echo "$PWD/bin" >> $GITHUB_PATH
          echo "$PWD/node_modules/.bin" >> $GITHUB_PATH
          bundle config set path 'vendor/bundle'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby-3.3
          bundler-cache: false

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Start chromedriver
        run: chromedriver --port=9515 --whitelisted-ips &

      - name: DB migrate
        run: bin/rails db:migrate

      - name: RSpec unit
        run: bin/rspec
        env:
          MARKUS__PYTHON: ./venv/bin/python3

      - name: RSpec system
        run: bin/rspec spec/system
        env:
          MARKUS__PYTHON: ./venv/bin/python3

      - name: Coveralls, rspec
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: rspec
          parallel: true
          file: coverage/lcov.info

  test_jest:
    needs: setup
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: markus_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --entrypoint redis-server
    env:
      RAILS_ENV: test
      NODE_ENV: test
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: setup-workspace
          path: .

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Extract prepared workspace
        run: tar -xzf workspace.tgz

      - name: Wire up PATH
        run: echo "$PWD/node_modules/.bin" >> $GITHUB_PATH

      - name: Jest
        run: npm run test-cov

      - name: Coveralls, jest
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: jest
          parallel: true
          file: coverage/lcov.info

  finish:
    needs: [test_rspec, test_jest]
    runs-on: ubuntu-22.04
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
          carryforward: "rspec,jest"
